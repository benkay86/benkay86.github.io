window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "abcd_meds", "modulename": "abcd_meds", "kind": "module", "doc": "<p>Tabulate prescription medication information from the ABCD Study</p>\n\n<p>Homepage: <a href=\"https://github.com/benkay86/abcd_meds\">https://github.com/benkay86/abcd_meds</a></p>\n\n<p>The Adolescent Brain Cognitive Development (ABCD) Study includes data on\nprescription and over-the-counter medication use for over 10,000 children at\nfive timepoints (study visits) and counting. This package provides tools to\nparse the data and generate tables, i.e. <a href=\"https://polar.rs\">Polars</a> data frames,\nindicating which participants took a medication of interest and when. For\nexample:</p>\n\n<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 src_subject_id \u2506 eventname                \u2506 med   \u2506 med_24 \u2506 med_ago \u2502\n\u2502 ---            \u2506 ---                      \u2506 ---   \u2506 ---    \u2506 ---     \u2502\n\u2502 str            \u2506 str                      \u2506 bool  \u2506 bool   \u2506 f32     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true  \u2506 false  \u2506 null    \u2502\n\u2502 AAAA1111       \u2506 1_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.5     \u2502\n\u2502 AAAA1111       \u2506 2_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.0     \u2502\n\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026     \u2506 \u2026      \u2506 \u2026       \u2502\n\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false \u2506 false  \u2506 null    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>The columns are:</p>\n\n<ul>\n<li><code>src_subject_id</code>: The unique 8-character portion of the participant's id, e.g.\nNDAR_INVAAAA1111 --> AAAA1111. Note that rows in the data frame may have the\nsame participant id but different eventnames.</li>\n<li><code>eventname</code>: Timepoint or visit within the longitudinal study, see the\n<code>abcd_meds.event.Event</code> enum.</li>\n<li><code>med</code>: <code>true</code> if the participant is taking one of the target medications,\n<code>false</code> otherwise.</li>\n<li><code>med_24</code>: <code>true</code> if the participant took the medication in the last 24 hours,\n<code>false</code> otherwise.</li>\n<li><code>med_ago</code>: How many hours ago the participant took the medication or <code>null</code> if\nthe participant last took the medication more than 24 hours ago. May be a\ndecimal number, e.g. 2.5 --> 90 minutes ago.</li>\n</ul>\n\n<p>You can use this package as a command-line tool or as a library to write your\nown Python code.</p>\n\n<h2 id=\"citation\">Citation</h2>\n\n<p>The abcd_meds package is free to use, modify, and redistribute under the MIT or\nApache open source licenses. If you use abcd_meds in an academic publication,\nplease support our work by citing our preprint:</p>\n\n<h2 id=\"why-is-this-package-needed\">Why is this package needed?</h2>\n\n<p>The ABCD Tabulated Release Data include a file\n<code>core/physical-health/ph_p_meds.csv</code>. This file encodes medication use across 90\ncolumns using unique identifiers from the\n<a href=\"https://www.nlm.nih.gov/research/umls/rxnorm/index.html\">NIH RxNorm Database</a>\ncalled rxcuis, e.g. 544393 is Motrin Children 100 mg in 5 mL Oral Suspension.\nTypically you will not be interested in knowning which children took a specific\nformulation or brand of a drug (e.g. Advil vs Motrin). Instead, you would like\nto know who took any medication containing the active ingredient ibuprofen.\nThis package automates the process of finding all the rxcuis related to an\nactive ingredient and matching them against the ABCD tabulated csv file.</p>\n\n<h2 id=\"command-line-use\">Command line use</h2>\n\n<p>This package may be invoked from the command line without needing to write any\nPython code. First you will need to install the package, for example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>abcd_meds\n</code></pre>\n</div>\n\n<p>Command line usage is organized into subcommands.  Run \n<code>python -m abcd_meds --help</code> for a list of available subcommands.</p>\n\n<pre><code>usage: abcd_meds [-h] {authenticate,download,make_table,rxnorm} ...\n\nTabulate prescription medication information from the ABCD Study\n\noptions:\n  -h, --help            show this help message and exit\n\ncommands:\n  {authenticate,download,make_table,rxnorm}\n    authenticate        Authenticate with NIMH Data Archive (NDA)\n    download            Download abcd-data-release-5.1.zip and extract ph_p_meds.csv\n    make_table          Make a table of medication use\n    rxnorm              Query RxNorm database\n\nExample: python -m abcd_meds make_table --ingredient ibuprofen --output ibuprofen.csv\n</code></pre>\n\n<p>For additional help with subcommands, use <code>--help</code> on the subcommand. For\nexample, <code>python -m abcd_meds make_table --help</code>.</p>\n\n<ul>\n<li><p>authenticate</p>\n\n<pre><code>usage: abcd_meds authenticate [-h]\n\nOpens a web browser and prompts for interactive NDA authentication.\n\noptions:\n-h, --help  show this help message and exit\n</code></pre></li>\n<li><p>download</p>\n\n<pre><code>usage: abcd_meds download [-h] [--url URL] [--filename FILENAME] [--extract-to EXTRACT_TO]\n\nDownload and extract ABCD tabulated medication data from the NDA.\n\noptions:\n-h, --help            show this help message and exit\n--url URL             What to download (default: https://nda.nih.gov/ftpDownload?id=yMg9WJ2NE8coDGYEtzwqLPc&amp;ownerId=k5ME5PUkEzKRDih8nuXmAio&amp;ownerName=study)\n--filename FILENAME   Where to save downloaded file (default: abcd-data-release-5.1.zip)\n--extract-to EXTRACT_TO\n                        Where to extract meds file, set to empty string \"\" to skip extraction. (default: core/physical-health/ph_p_meds.csv)\n</code></pre></li>\n<li><p>make_table</p>\n\n<pre><code>usage: abcd_meds make_table [-h] [-i CSV_FILE] -o OUTPUT [--prefix PREFIX] [--filter-events [FILTER_EVENTS ...]] (--ingredient INGREDIENT | --rxcuis RXCUIS [RXCUIS ...])\n\nMakes a table with columns src_subject_id for the 8-character unique id, eventname for the event name (e.g. baseline_year_1_arm_1), med indicating if participant took a matching medication, med_24 indicating if medication was taken in the last 24 hours, and med_ago indicating how many hours ago the medication was taken (or null if more than 24 hours ago).\n\noptions:\n-h, --help            show this help message and exit\n-i CSV_FILE, --input CSV_FILE\n                        Tabulated medication file (default: core/physical-health/ph_p_meds.csv)\n-o OUTPUT, --output OUTPUT\n                        Output file, must end in .csv or .parquet (default: None)\n--prefix PREFIX       Column prefix, e.g. xxx --&gt; xxx, xxx_24, xxx_ago (default: med)\n--filter-events [FILTER_EVENTS ...]\n                        Filter by list of events, e.g. baseline_year_1_arm_1 (default: None)\n--ingredient INGREDIENT\n                        Match all meds containing ingredient rxcui or name, e.g. ibuprofen (default: None)\n--rxcuis RXCUIS [RXCUIS ...]\n                        Match any rxcui in list, e.g. 123 4567 8910 (default: None)\n</code></pre></li>\n<li><p>rxnorm</p>\n\n<pre><code>usage: abcd_meds rxnorm [-h] (--rxcui-from-name NAME | --ingredients name_or_rxcui | --related rxcui)\n\nQuery RxNorm database\n\noptions:\n-h, --help            show this help message and exit\n--rxcui-from-name NAME\n                        Retrieve rxcui for a medication name, e.g. Advil --&gt; 153010 (default: None)\n--ingredients name_or_rxcui\n                        List ingredients of a medication, e.g. Augmentin --&gt; 48203 723 (default: None)\n--related rxcui       List all rxcuis related to an ingredient, e.g. (default: None)\n</code></pre></li>\n</ul>\n\n<h2 id=\"calling-the-library\">Calling the library</h2>\n\n<p>Important Classes and Methods</p>\n\n<ul>\n<li><code>abcd_meds.nda_downloader.download()</code>: Automatically fetch the ABCD tabulated data.</li>\n<li><code>abcd_meds.rxnorm.rxcui_from_name()</code>: Look up the rxcui of a drug by name.</li>\n<li><code>abcd_meds.rxnorm.ingredients()</code>: Look up rxcui(s) of a drugs active ingredient(s).</li>\n<li><code>abcd_meds.rxnorm.related_rxcuis()</code>: Look up rxcui(s) of drugs containing an ingredient.</li>\n<li><code>abcd_meds.medparser.make_table()</code>: Generate data frame for a list of target rxcuis.</li>\n<li><code>abcd_meds.medparser.join()</code>: Join data frames for different drugs.</li>\n<li><code>abcd_meds.medparser.filter_events()</code>: Filter a data frame by timepoint/study visit.</li>\n<li><code>abcd_meds.event.Event</code>: Enum for referencing timepoints/study visits within ABCD.</li>\n</ul>\n\n<p>The following series of examples illustrate typical use of the library. See the\ndocumentation for individual modules, classes, and methods for greater detail.</p>\n\n<p>Look up the active ingredient of Tylenol. Note the use of <code>await</code> to perform\nasynchronous operations. Refer to the\n<a href=\"https://realpython.com/async-io-python/\">Python Async IO Tutorial</a> if you are\nunfamiliar with async/await. In general, you will just need to use\n<a href=\"https://docs.python.org/3/library/asyncio-runner.html#asyncio.run\"><code>asyncio.run()</code></a>.\nNote that <code>abcd_meds.ingredients()</code> returns a list, as drugs may have more than\none active ingredient. Alternatively, look up the rxcui of acetaminophen.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">abcd_meds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">ingredients</span><span class=\"p\">(</span><span class=\"s1\">&#39;Tylenol&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[161]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">rxcui_from_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;acetaminophen&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui</span>\n<span class=\"go\">161</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Get a list of all the rxcuis of drugs containing acetaminophen. </p>\n\n<h6 id=\"example-2\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">rxcui_from_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;acetaminophen&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">related_rxcuis</span><span class=\"p\">(</span><span class=\"n\">rxcui</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span>\n<span class=\"go\">[1013857, 1038776, ..., 2679416, 2679421]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">)</span> <span class=\"c1\"># Wow, there&#39;s a lot of drugs with acetaminophen!</span>\n<span class=\"go\">1693</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Make a data frame indicating acetaminophen use. Note the use of\n<a href=\"https://docs.pola.rs/api/python/dev/reference/lazyframe/api/polars.LazyFrame.collect_async.html#polars.LazyFrame.collect_async\"><code>collect_async()</code></a>\nto transform optimized, \"lazy\" operations into a concrete data frame. The\n<code>src_subject_id</code> is the NDAR_INVABCD1234 identifier without the NDAR_INV prefix.\nSee <code>abcd_meds.event.Event</code> for more information about <code>eventname</code>. The column\n<code>med</code> indicates who is taking the drugs, <code>med_24</code> who took it in the last 24\nhours, and <code>med_ago</code> how many hours ago (or <code>null</code> if more than 24 hours ago).</p>\n\n<h6 id=\"example-3\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">make_table</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">collect_async</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>\n<span class=\"go\">shape: (11_859, 5)</span>\n<span class=\"go\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span>\n<span class=\"go\">\u2502 src_subject_id \u2506 eventname                \u2506 med   \u2506 med_24 \u2506 med_ago \u2502</span>\n<span class=\"go\">\u2502 ---            \u2506 ---                      \u2506 ---   \u2506 ---    \u2506 ---     \u2502</span>\n<span class=\"go\">\u2502 str            \u2506 str                      \u2506 bool  \u2506 bool   \u2506 f32     \u2502</span>\n<span class=\"go\">\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true  \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 1_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.5     \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 2_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.0     \u2502</span>\n<span class=\"go\">\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026     \u2506 \u2026      \u2506 \u2026       \u2502</span>\n<span class=\"go\">\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Load the data from a custom location and save the raw data frame for future\nre-use. Make a drug-specific data frame with a custom column prefix. Note the\nuse of\n<a href=\"https://docs.pola.rs/api/python/dev/reference/lazyframe/api/polars.LazyFrame.collect.html\"><code>collect()</code></a>\nto go from a lazy frame to a data frame synchronously.</p>\n\n<h6 id=\"example-4\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">load_df</span><span class=\"p\">(</span><span class=\"n\">csv_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;core/physical-health/ph_p_meds.csv&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect_async</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">make_table</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">col_prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span>\n<span class=\"go\">shape: (11_859, 5)</span>\n<span class=\"go\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span>\n<span class=\"go\">\u2502 src_subject_id \u2506 eventname                \u2506 apap   \u2506 apap_24 \u2506 apap_ago \u2502</span>\n<span class=\"go\">\u2502 ---            \u2506 ---                      \u2506 ---    \u2506 ---     \u2506 ---      \u2502</span>\n<span class=\"go\">\u2502 str            \u2506 str                      \u2506 bool   \u2506 bool    \u2506 f32      \u2502</span>\n<span class=\"go\">\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true   \u2506 false   \u2506 null     \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 1_year_follow_up_y_arm_1 \u2506 true   \u2506 true    \u2506 2.5      \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 2_year_follow_up_y_arm_1 \u2506 true   \u2506 true    \u2506 2.0      \u2502</span>\n<span class=\"go\">\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026      \u2506 \u2026       \u2506 \u2026        \u2502</span>\n<span class=\"go\">\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false  \u2506 false   \u2506 null     \u2502</span>\n<span class=\"go\">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Write the data frame to a file. Output in csv format will work with a wide\nvariety of outside tools. Output in the\n<a href=\"https://parquet.apache.org/\">Apache Parquet</a> retains schema information (i.e.\nvariable types) and can be compressed.</p>\n\n<h6 id=\"example-5\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">write_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">write_parquet</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap.parquet&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">write_parquet</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap.parquet&#39;</span><span class=\"p\">,</span> <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"s1\">&#39;zstd&#39;</span><span class=\"p\">,</span> <span class=\"n\">compression_level</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Make another data frame for ibuprofen. Merge the two frames together.</p>\n\n<h6 id=\"example-6\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">rxcui_from_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibuprofen&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">related_rxcuis</span><span class=\"p\">(</span><span class=\"n\">rxcui</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_ibu</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">make_table</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">col_prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibu&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_full</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">df_apap</span><span class=\"p\">,</span> <span class=\"n\">df_ibu</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_full</span>\n<span class=\"go\">shape: (48_991, 8)</span>\n<span class=\"go\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span>\n<span class=\"go\">\u2502 src_subject_id \u2506 eventname                \u2506 apap  \u2506 apap_24 \u2506 apap_ago \u2506 ibu   \u2506 ibu_24 \u2506 ibu_ago \u2502</span>\n<span class=\"go\">\u2502 ---            \u2506 ---                      \u2506 ---   \u2506 ---     \u2506 ---      \u2506 ---   \u2506 ---    \u2506 ---     \u2502</span>\n<span class=\"go\">\u2502 str            \u2506 str                      \u2506 bool  \u2506 bool    \u2506 f32      \u2506 bool  \u2506 bool   \u2506 f32     \u2502</span>\n<span class=\"go\">\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true  \u2506 false   \u2506 null     \u2506 false \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 1_year_follow_up_y_arm_1 \u2506 true  \u2506 true    \u2506 2.5      \u2506 true  \u2506 true   \u2506 1.0     \u2502</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 2_year_follow_up_y_arm_1 \u2506 true  \u2506 true    \u2506 2.0      \u2506 false \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026     \u2506 \u2026       \u2506 \u2026        \u2506 \u2026     \u2506 \u2026      \u2506 \u2026       \u2502</span>\n<span class=\"go\">\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false \u2506 false   \u2506 null     \u2506 true  \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Filter the data frame. Keep only the baseline event.</p>\n\n<h6 id=\"example-7\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_full_baseline</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">filter_events</span><span class=\"p\">(</span><span class=\"n\">df_full</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baseline_year_1_arm_1&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_full_baseline</span>\n<span class=\"go\">shape: (11_859, 8)</span>\n<span class=\"go\">\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span>\n<span class=\"go\">\u2502 src_subject_id \u2506 eventname                \u2506 apap  \u2506 apap_24 \u2506 apap_ago \u2506 ibu   \u2506 ibu_24 \u2506 ibu_ago \u2502</span>\n<span class=\"go\">\u2502 ---            \u2506 ---                      \u2506 ---   \u2506 ---     \u2506 ---      \u2506 ---   \u2506 ---    \u2506 ---     \u2502</span>\n<span class=\"go\">\u2502 str            \u2506 str                      \u2506 bool  \u2506 bool    \u2506 f32      \u2506 bool  \u2506 bool   \u2506 f32     \u2502</span>\n<span class=\"go\">\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561</span>\n<span class=\"go\">\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true  \u2506 false   \u2506 null     \u2506 false \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026     \u2506 \u2026       \u2506 \u2026        \u2506 \u2026     \u2506 \u2026      \u2506 \u2026       \u2502</span>\n<span class=\"go\">\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false \u2506 false   \u2506 null     \u2506 true  \u2506 false  \u2506 null    \u2502</span>\n<span class=\"go\">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Count the number of participants taking both acetamimophen and ibuprofen at\nbaseline.</p>\n\n<h6 id=\"example-8\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">df_full_baseline</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibu&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">count</span>\n<span class=\"go\">53</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>Get a list of the participants taking both acetaminophen and ibuprofen at\nbaseline.</p>\n\n<h6 id=\"example-9\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">df_full_baseline</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibu&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">get_column</span><span class=\"p\">(</span><span class=\"s1\">&#39;src_subject_id&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ids</span>\n<span class=\"go\">[CCCC3333, ..., XXXX9999]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"p\">)</span>\n<span class=\"go\">53</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "abcd_meds.event", "modulename": "abcd_meds.event", "kind": "module", "doc": "<p>Module for the <code>Event</code> enum for defining ABCD study events.</p>\n"}, {"fullname": "abcd_meds.event.Event", "modulename": "abcd_meds.event", "qualname": "Event", "kind": "class", "doc": "<p>Events in the ABCD study.</p>\n\n<p>The ABCD study is a longidutinal study with multiple events: baseline, year\n1 follow-up, year 2 follow-up, etc. This enum defines the different events\nand lets you get the corresponding string for the eventname field in the\nnon-imaging data or the BIDS session in the imaging data.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">eventname</span>\n<span class=\"go\">&#39;baseline_year_1_arm_1&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">YEAR1</span><span class=\"o\">.</span><span class=\"n\">bidsname</span>\n<span class=\"go\">&#39;1YearFollowUpYArm1&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">YEAR1</span><span class=\"o\">.</span><span class=\"n\">as_bids</span><span class=\"p\">()</span> <span class=\"c1\"># getter-style equivalent of bidsname</span>\n<span class=\"go\">&#39;1YearFollowUpYArm1&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># make an Event from an integer</span>\n<span class=\"go\">Event.YEAR1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;2YearFollowUpYArm1&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># make an Event from a string</span>\n<span class=\"go\">Event.YEAR2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Event.BASELINE</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "abcd_meds.event.Event.BASELINE", "modulename": "abcd_meds.event", "qualname": "Event.BASELINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Event.BASELINE: 0&gt;"}, {"fullname": "abcd_meds.event.Event.YEAR1", "modulename": "abcd_meds.event", "qualname": "Event.YEAR1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Event.YEAR1: 1&gt;"}, {"fullname": "abcd_meds.event.Event.YEAR2", "modulename": "abcd_meds.event", "qualname": "Event.YEAR2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Event.YEAR2: 2&gt;"}, {"fullname": "abcd_meds.event.Event.YEAR3", "modulename": "abcd_meds.event", "qualname": "Event.YEAR3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Event.YEAR3: 3&gt;"}, {"fullname": "abcd_meds.event.Event.YEAR4", "modulename": "abcd_meds.event", "qualname": "Event.YEAR4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Event.YEAR4: 4&gt;"}, {"fullname": "abcd_meds.event.Event.eventname", "modulename": "abcd_meds.event", "qualname": "Event.eventname", "kind": "variable", "doc": "<p>The event name:</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">eventname</span>\n<span class=\"go\">`baseline_year_1_arm_1`</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "abcd_meds.event.Event.bidsname", "modulename": "abcd_meds.event", "qualname": "Event.bidsname", "kind": "variable", "doc": "<p>The BIDS session name.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">bidsname</span>\n<span class=\"go\">&#39;baselineYear1Arm1&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "abcd_meds.event.Event.as_event", "modulename": "abcd_meds.event", "qualname": "Event.as_event", "kind": "function", "doc": "<p>The event name:</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">as_event</span><span class=\"p\">()</span>\n<span class=\"go\">`baseline_year_1_arm_1`</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.event.Event.as_bids", "modulename": "abcd_meds.event", "qualname": "Event.as_bids", "kind": "function", "doc": "<p>The BIDS session name.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">as_bids</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;baselineYear1Arm1&#39;</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.event.Event.as_int", "modulename": "abcd_meds.event", "qualname": "Event.as_int", "kind": "function", "doc": "<p>Event as an integer.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">BASELINE</span><span class=\"o\">.</span><span class=\"n\">as_int</span><span class=\"p\">()</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">YEAR1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.event.Event.from_str", "modulename": "abcd_meds.event", "qualname": "Event.from_str", "kind": "function", "doc": "<p>Construct a new <code>Event</code> from a string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>str (str):</strong>  A case-insensitive event name or BIDS session name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Event: An instance of this class.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If <code>str</code> does not correspond to an event.</li>\n</ul>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;baseline_year_1_arm_1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Event.BASELINE</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Event.YEAR1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;2YearFollowUpArm1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Event.YEAR2</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.medparser", "modulename": "abcd_meds.medparser", "kind": "module", "doc": "<p>Module for parsing who is taking what medication when in the ABCD Study.</p>\n\n<p>You will need the ABCD Tabulated Release Data, specifically the file\n<code>core/physical-health/ph_p_meds.csv</code> from <code>abcd-data-release-5.1.zip</code>. See the\n<code>abcd_meds.nda_downloader</code> module for help downloading the data.</p>\n\n<h2 id=\"dataframe-format\">DataFrame Format</h2>\n\n<p>This module generates <a href=\"https://polar.rs\">polars</a> data frames with special\ncolumns indicating prescription drug use.  Note: You can easily\n<a href=\"https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.to_pandas.html\">convert to Pandas data frames</a>\nif desired. A typical data frame will look like:</p>\n\n<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 src_subject_id \u2506 eventname                \u2506 med   \u2506 med_24 \u2506 med_ago \u2502\n\u2502 ---            \u2506 ---                      \u2506 ---   \u2506 ---    \u2506 ---     \u2502\n\u2502 str            \u2506 str                      \u2506 bool  \u2506 bool   \u2506 f32     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 AAAA1111       \u2506 baseline_year_1_arm_1    \u2506 true  \u2506 false  \u2506 null    \u2502\n\u2502 AAAA1111       \u2506 1_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.5     \u2502\n\u2502 AAAA1111       \u2506 2_year_follow_up_y_arm_1 \u2506 true  \u2506 true   \u2506 2.0     \u2502\n\u2502 \u2026              \u2506 \u2026                        \u2506 \u2026     \u2506 \u2026      \u2506 \u2026       \u2502\n\u2502 BBBB2222       \u2506 baseline_year_1_arm_1    \u2506 false \u2506 false  \u2506 null    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<p>The columns are:</p>\n\n<ul>\n<li><code>src_subject_id</code>: The unique 8-character portion of the participant's id, e.g.\nNDAR_INVAAAA1111 --> AAAA1111. Note that rows in the data frame may have the\nsame participant id but different eventnames.</li>\n<li><code>eventname</code>: Timepoint within the longitudinal study, see the\n<code>abcd_meds.event.Event</code> enum.</li>\n<li><code>med</code>: <code>true</code> if the participant is taking one of the target medications,\n<code>false</code> otherwise.</li>\n<li><code>med_24</code>: <code>true</code> if the participant took the medication in the last 24 hours,\n<code>false</code> otherwise.</li>\n<li><code>med_ago</code>: How many hours ago the participant took the medication or <code>null</code> if\nthe participant last took the medication more than 24 hours ago.. May be a\ndecimal number, e.g. 2.5 --> 90 minutes ago.</li>\n</ul>\n\n<p>Column names can be customized by calling <code>make_table()</code> with <code>col_prefix=xxx</code>,\nin which case the column names would be <code>xxx</code>, <code>xxx_24</code>, and <code>xxx_ago</code>.</p>\n\n<h2 id=\"important-methods\">Important Methods</h2>\n\n<ul>\n<li><code>load_df()</code>: parse the medication csv file into a data frame</li>\n<li><code>make_table()</code>: make a data frame of who is taking a medication</li>\n<li><code>filter_events()</code>: filter by event, e.g. baseline_year_1_arm_1</li>\n<li><code>join()</code>: join two data frames based on participant id and event</li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<h6 id=\"examples-2\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># How many participants took acetaminophen at the baseline event?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">abcd_meds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">polars</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Get list of medications containing acetaminophen.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">related_rxcuis</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">rxcui_from_name</span><span class=\"p\">((</span><span class=\"s1\">&#39;acetaminophen&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Load csv file.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">load_df</span><span class=\"p\">(</span><span class=\"s1\">&#39;core/physical-health/ph_p_meds.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Convert LazyFrame to a concrete DataFrame for later re-use.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Can also do it synchronously with df.collect().</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">collect_async</span><span class=\"p\">)()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Who is taking a medication containing acetaminophen?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">make_table</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">(),</span> <span class=\"n\">col_prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Filter down to just the baseline event.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">filter_events</span><span class=\"p\">(</span><span class=\"n\">df_apap</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baseline_year_1_arm_1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Convert LazyFrame to a concrete DataFrame for later re-use.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_apap</span> <span class=\"o\">=</span> <span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Filter and count.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> participants took acetaminophen at baseline.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))</span>\n<span class=\"go\">370 participants took acetaminophen at baseline.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># How about acetamiophen and ibuprofen?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Re-use the original data frame.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">related_rxcuis</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"k\">await</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">rxcui_from_name</span><span class=\"p\">((</span><span class=\"s1\">&#39;ibuprofen&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_ibu</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">make_table</span><span class=\"p\">(</span><span class=\"n\">rxcuis</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">(),</span> <span class=\"n\">col_prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;ibu&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_ibu</span> <span class=\"o\">=</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">filter_events</span><span class=\"p\">(</span><span class=\"n\">df_ibu</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baseline_year_1_arm_1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_ibu</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">df_ibu</span><span class=\"o\">.</span><span class=\"n\">collect_async</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_full</span> <span class=\"o\">=</span> <span class=\"n\">df_apap</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">df_ibu</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;src_subject_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;eventname&#39;</span><span class=\"p\">],</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;full&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">df_full</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">((</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;apap&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"s1\">&#39;ibu&#39;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> participants too both acetaminophen and ibuprofen at baseline.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">))</span>\n<span class=\"go\">53 participants too both acetaminophen and ibuprofen at baseline.</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "abcd_meds.medparser.load_df", "modulename": "abcd_meds.medparser", "qualname": "load_df", "kind": "function", "doc": "<p>Parse the medication CSV file into a data frame.</p>\n\n<p>Typically you will call this method:</p>\n\n<ul>\n<li>To pass a data frame from a custom location into <code>make_table()</code>.</li>\n<li>Followed by <code>collect()</code> to store the data in-memory for later re-use\nacross multiple calles to <code>make_table()</code>.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>abcd_dir:</strong>  Root directory of the abcd tabulated data.</li>\n<li><strong>csv_file:</strong>  Relative path of the medication data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A lazy data frame with the parsed contents the contents of the csv file.\n  Call\n  <a href=\"https://docs.pola.rs/api/python/stable/reference/lazyframe/api/polars.LazyFrame.collect.html#polars.LazyFrame.collect\"><code>collect()</code></a>\n  to get a concrete data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">abcd_dir</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/benjamin/src/abcd_meds&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">csv_file</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;core/physical-health/ph_p_meds.csv&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.medparser.make_table", "modulename": "abcd_meds.medparser", "qualname": "make_table", "kind": "function", "doc": "<p>Make a data frame with columns indicating who is taking a medication.</p>\n\n<p>Automatically parses the csv file containing the ABCD drug data and creates\na data frame with special columns <code>med</code>, <code>med_24</code>, and <code>med_ago</code> indicating\nwhich participants took at least one of the medications in <code>rxcuis</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rxcuis:</strong>  List of target rxcuis (medications), see <code>abcd_meds.rxnorm</code>.</li>\n<li><strong>col_prefix:</strong>  Rename output columns from <code>med*</code> to a custom prefix.</li>\n<li><strong>df:</strong>  Use output from <code>load_df()</code> instead of parsing the csv file automatically.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A lazy data frame.  Call\n  <a href=\"https://docs.pola.rs/api/python/stable/reference/lazyframe/api/polars.LazyFrame.collect.html#polars.LazyFrame.collect\"><code>collect()</code></a>\n  to get a concrete data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rxcuis</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">col_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;med&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span> <span class=\"o\">|</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.medparser.filter_events", "modulename": "abcd_meds.medparser", "qualname": "filter_events", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span> <span class=\"o\">|</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.medparser.join", "modulename": "abcd_meds.medparser", "qualname": "join", "kind": "function", "doc": "<p>Join two data frames.</p>\n\n<p>Performs a full join of two data frames using the columns <code>src_subject_id</code>\nand <code>eventname</code>. The data frames should have been created with\n<code>make_table()</code> using the <code>col_prefix</code> argument so that the other columns\nhave unique names.</p>\n\n<p>Short for: <code>df1.join(df2, on=['src_subject_id', 'eventname'], how='inner')</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>df1:</strong>  The first data frame to join.</li>\n<li><strong>df2:</strong>  The second data frame to join.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A lazy data frame.  Call\n  <a href=\"https://docs.pola.rs/api/python/stable/reference/lazyframe/api/polars.LazyFrame.collect.html#polars.LazyFrame.collect\"><code>collect()</code></a>\n  to get a concrete data frame.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df1</span><span class=\"o\">=</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span> <span class=\"o\">|</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">df2</span><span class=\"o\">=</span><span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span> <span class=\"o\">|</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">lazyframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader", "modulename": "abcd_meds.nda_downloader", "kind": "module", "doc": "<p>Download files from the NIMH Data Archive (NDA).</p>\n\n<p>Tabulating prescrpition drug information from the ABCD Study requires access to\nthe ABCD Tabulated Release Data, which is distributed as a zip file on the NIMH\nData Archive. This module helps automate the task of downloading files from the\nNDA. It downloads the <code>abcd-data-release-5.1.zip</code> by default. The url for the\nzip file is derived from: <a href=\"http://dx.doi.org/10.15154/z563-zd24\">http://dx.doi.org/10.15154/z563-zd24</a></p>\n\n<p>After downloading the data, the user will need to manually extract the zip file\nand locate the file <code>core/physical-health/ph_p_meds.csv</code></p>\n\n<p>See the example below for a typical use case. By default, calling <code>open()</code> will\npop up a web browser and prompt the user to complete interactive authentication\nwith the NDA. Once authenticated, a call to <code>NdaDownloader.download()</code> will\ndownload the data. You may register a <code>NdaDownloader.progress_callback</code> function\nto use a progress bar such as <a href=\"https://github.com/tqdm/tqdm\">tqdm</a></p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">abcd_meds</span> <span class=\"kn\">import</span> <span class=\"n\">nda_downloader</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">tqdm.asyncio</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">nda_downloader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">downloader</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">with</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">content_length</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"n\">unit_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">unit_divisor</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pbar</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">progress_callback</span> <span class=\"o\">=</span> <span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">update</span>\n<span class=\"gp\">... </span>        <span class=\"k\">await</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "abcd_meds.nda_downloader.NdaAuthenticationError", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaAuthenticationError", "kind": "class", "doc": "<p>Raised when authentication with NIMH Data Archive fails.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "abcd_meds.nda_downloader.NdaAuthenticationError.__init__", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaAuthenticationError.__init__", "kind": "function", "doc": "<p>Construct a new instance of <code>NdaAuthenticationError</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message:</strong>  What happened.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Authentication with NIMH Data Archive timed out.&#39;</span></span>)</span>"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloadError", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloadError", "kind": "class", "doc": "<p>Raised for problems downloading a file from the NIMH Data Archive.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloadError.__init__", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloadError.__init__", "kind": "function", "doc": "<p>Construct a new instance of <code>NdaDownloadError</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  URL for which error occurred</li>\n<li><strong>message:</strong>  What happened</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloadError.url", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloadError.url", "kind": "variable", "doc": "<p>URL for which error occurred.</p>\n"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader", "kind": "class", "doc": "<p>State for an authenticated HTTP session with the NIMH Data Archive.</p>\n\n<p>Typically you will obtain an instance of <code>NdaDownloader</code> through a context\nmanager by calling <code>open()</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">nda_downloader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">downloader</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">await</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>You may also create a new <code>NdaDownloader</code> with a call to\n<code>NdaDownloader.open()</code>. Instances of <code>NdaDownloader</code> created outside the\ncontext manager should be closed.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">downloader</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">NdaDownloader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">await</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">await</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.__init__", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.__init__", "kind": "function", "doc": "<p>Private constructor for NdaDownloader.</p>\n\n<p>Do not call <code>NdaDownloader()</code> directly. Use <code>open()</code> or\n<code>NdaDownloader.open()</code> instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span>, </span><span class=\"param\"><span class=\"n\">content_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.progress_callback", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.progress_callback", "kind": "function", "doc": "<p>Progress callback function.</p>\n\n<p>The callback function should take one argument, a number of bytes. The\ncallback function will be called periodically with the number of bytes\ndownloaded since the last call.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>c:</strong>  A callback function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.open", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.open", "kind": "function", "doc": "<p>Open a a url on the NIMH Data Archive for download.</p>\n\n<p>Typically you will want to use the context manager <code>open()</code> instead.\nInstances of NdaDownloader created using <code>NdaDownloader.open()</code> must be\nmanually closed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  The url to download, defaults to the url for\nabcd-data-release-5.1.zip derived from\n<a href=\"http://dx.doi.org/10.15154/z563-zd24\">http://dx.doi.org/10.15154/z563-zd24</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An instance of <code>NdaDownloader</code>.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>NdaAuthenticationError</code>:</strong>  If authentication with the NDA fails.</li>\n<li><strong><code>NdaDownloadError</code>:</strong>  For bad responses from the NDA server.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://nda.nih.gov/ftpDownload?id=yMg9WJ2NE8coDGYEtzwqLPc&amp;ownerId=k5ME5PUkEzKRDih8nuXmAio&amp;ownerName=study&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.content_length", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.content_length", "kind": "variable", "doc": "<p>Total number of bytes to download.</p>\n", "annotation": ": int | None"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.url", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.url", "kind": "variable", "doc": "<p>URL to download.</p>\n", "annotation": ": str"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.closed", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.closed", "kind": "variable", "doc": "<p>Check if <code>NdaDownloader</code> instance is closed.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><code>True</code> if download is closed, <code>False</code> if download is not finished.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.close", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.close", "kind": "function", "doc": "<p>Close an instance of <code>NdaDownloader</code>.</p>\n\n<p>Closes the underlying HTTP session with the NDA server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.nda_downloader.NdaDownloader.download", "modulename": "abcd_meds.nda_downloader", "qualname": "NdaDownloader.download", "kind": "function", "doc": "<p>Download a file from the NIMH Data Archive.</p>\n\n<p>Execute the <code>NdaDownloader</code> to download its url from the NDA and save\nthe contents to the destination file. Provides progress updates by\ncalling the <code>progess_callback</code> function if one has been provided.\nReturns once the download is complete.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename:</strong>  Destination file.</li>\n<li><strong>chunk_size:</strong>  Downloads chunks of at most chunk_size between progress\nupdates.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>ValueError</code>:</strong>  When called on an <code>NdaDownloader</code> that is closed.</li>\n<li><strong><code>NdaDownloadError</code>:</strong>  For bad responses from the NDA server.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;abcd-data-release-5.1.zip&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">4096</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.nda_downloader.get_cookies", "modulename": "abcd_meds.nda_downloader", "qualname": "get_cookies", "kind": "function", "doc": "<p>Get browser cookies for nih.gov domain.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dictionary of browser cookies matching nih.gov domain.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">cookiejar</span><span class=\"o\">.</span><span class=\"n\">CookieJar</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader.cookiejar_to_dict", "modulename": "abcd_meds.nda_downloader", "qualname": "cookiejar_to_dict", "kind": "function", "doc": "<p>Convert an instance of CookieJar to a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cookies</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">cookiejar</span><span class=\"o\">.</span><span class=\"n\">CookieJar</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader.check_authenticated", "modulename": "abcd_meds.nda_downloader", "qualname": "check_authenticated", "kind": "function", "doc": "<p>Check if user is authenticated to NIMH Data Archive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>A CookieJar containing the NDA authentication token.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><code>True</code> if user is authenticated, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cookies</span><span class=\"p\">:</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">cookiejar</span><span class=\"o\">.</span><span class=\"n\">CookieJar</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">CookieJar</span><span class=\"p\">[</span><span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;RASTarget&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://sts.nih.gov/auth/oauth/v2/authorize/login?parms=logo_file%3Dnda.jpg</span><span class=\"si\">%26lo</span><span class=\"s1\">gin_idp%3Dnih%2Cera%2Clogingov</span><span class=\"si\">%26lo</span><span class=\"s1\">gin_ial%3D1&amp;action=login&amp;sessionID=3223bfa5-38d4-43d9-8ca5-02d71841b9ae&amp;sessionData=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.ew0KICAgICJzZXNzaW9uIjogew0KICAgICAgICAic2Vzc2lvbklEIjoiMzIyM2JmYTUtMzhkNC00M2Q5LThjYTUtMDJkNzE4NDFiOWFlIiwNCiAgICAgICAgImV4cCI6MTcyNzMxNjMxNywNCiAgICAgICAgImN1cnJlbnRfdXNlcm5hbWUiOiIiLA0KICAgICAgICAiY3VycmVudF91c2VyX2NvbnNlbnQiOiJub25lIiwNCiAgICAgICAgImN1cnJlbnRfdXNlcl9yb2xlIjoiIiwNCiAgICAgICAgImN1cnJlbnRfdXNlcl9hY3IiOiIwIiwNCiAgICAgICAgImN1cnJlbnRfdXNlcl9hdXRoVGltZSI6IjAiLA0KICAgICAgICAic2FsdCI6IiIsDQogICAgICAgICJ0aGlyZF9wYXJ0eV9zc29fdG9rZW4iOiIiLA0KICAgICAgICAidGhpcmRfcGFydHlfc3NvX3Rva2VuX3R5cGUiOiIiDQogICAgfSwNCiAgICAicmVxdWVzdF9jb25zZW50Ijogew0KICAgICAgICAiY2xpZW50X25hbWUiOiJOSU1IK0RhdGErQXJjaGl2ZSslMjhOREElMjkiLA0KICAgICAgICAic2NvcGVfdmVyaWZpZWQiOiJvcGVuaWQrZmVkZXJhdGVkX3NvdXJjZXMrcHJvZmlsZStmZWRlcmF0ZWRfaWRlbnRpdGllcytkZXBhcnRtZW50K2VtYWlsIg0KICAgIH0sDQogICAgInJlcXVlc3RfcGFyYW1ldGVycyI6IHsNCiAgICAgICAgImRpc3BsYXkiOiJwYWdlIiwNCiAgICAgICAgInByb21wdCI6ImxvZ2luK2NvbnNlbnQiLA0KICAgICAgICAiaWRfdG9rZW5faGludCI6IiIsDQogICAgICAgICJsb2dpbl9oaW50IjoiIiwNCiAgICAgICAgImFjcl92YWx1ZXMiOiIiLA0KICAgICAgICAiY2xpZW50X2lkIjoiMjkxZmRkZGQtYmRmNy00MTZlLWFkZTQtMDExYjQ0ZjYwNWRmIiwNCiAgICAgICAgIm5vbmNlIjoiIiwNCiAgICAgICAgInNjb3BlIjoib3BlbmlkK3Byb2ZpbGUrZW1haWwrZmVkZXJhdGVkX2lkZW50aXRpZXMrZmVkZXJhdGVkX3NvdXJjZXMrZGVwYXJ0bWVudCIsDQogICAgICAgICJtYXhfYWdlIjogIiINCiAgICB9DQp9.Y2kvBeI6lbtl5jDg8MNGCzuRMdUWiJvTUiB9qyt8TYE&amp;correlationID=nihgw-fd8e1962c089d6d1.1444990c59217b69&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;auth.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1727316317</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;idcookievalue&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;NULL&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;auth.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1743123938</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;_ga&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;GA1.3.1359566419.1727296836&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;.nda.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1761872744</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;_ga_4MKWL8HRM8&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;GS1.3.1727312712.2.1.1727313207.0.0.0&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;.nda.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1761873207</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;AWSALB&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;linxvkuIIK/1dKmNw8+NjkkX7wWszyKUddnTNZ6ZFZAKA9Njdve941xTYiS2Yaf/qLx6NaFDWVt7znVmEdUpizWcLBYBo/vkrAUe1oudH4fson1wBp15v9UgmY2I8cjUDcIN7eyRC7RYa/Csl9rOpCbYzPP7EKnjo4Ouu72erNnx8xzYT3BtJSaNMrUokw==&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;nda.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1727918005</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">Cookie</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;AWSALBCORS&#39;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;linxvkuIIK/1dKmNw8+NjkkX7wWszyKUddnTNZ6ZFZAKA9Njdve941xTYiS2Yaf/qLx6NaFDWVt7znVmEdUpizWcLBYBo/vkrAUe1oudH4fson1wBp15v9UgmY2I8cjUDcIN7eyRC7RYa/Csl9rOpCbYzPP7EKnjo4Ouu72erNnx8xzYT3BtJSaNMrUokw==&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">&#39;nda.nih.gov&#39;</span><span class=\"p\">,</span> <span class=\"n\">domain_specified</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">domain_initial_dot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"n\">path_specified</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"mi\">1727918005</span><span class=\"p\">,</span> <span class=\"n\">discard</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">rfc2109</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)]</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader.authenticate", "modulename": "abcd_meds.nda_downloader", "qualname": "authenticate", "kind": "function", "doc": "<p>Prompt user to authenticate with NIMH Data Archive.</p>\n\n<p>Opens a web browser and prompts the user to authenticate to the NDA.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>login_url:</strong>  URL prompting user to authenticate to the NDA.</li>\n<li><strong>timeout:</strong>  Maximum number of seconds to wait for authentication.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Cookie jar containing authentication tokens.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><code>NdaAuthenticationError</code> if authentication timed out.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">login_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://nda.nih.gov/user/login_required&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span> <span class=\"o\">=</span> <span class=\"mi\">60</span></span><span class=\"return-annotation\">) -> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">cookiejar</span><span class=\"o\">.</span><span class=\"n\">CookieJar</span>:</span></span>", "funcdef": "def"}, {"fullname": "abcd_meds.nda_downloader.open", "modulename": "abcd_meds.nda_downloader", "qualname": "open", "kind": "function", "doc": "<p>Open a a url on the NIMH Data Archive for download.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  The url to download, defaults to the url for\nabcd-data-release-5.1.zip derived from\n<a href=\"http://dx.doi.org/10.15154/z563-zd24\">http://dx.doi.org/10.15154/z563-zd24</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>An context with an instance of <code>NdaDownloader</code>.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong><code>NdaAuthenticationError</code>:</strong>  If authentication with the NDA fails.</li>\n<li><strong><code>NdaDownloadError</code>:</strong>  For bad responses from the NDA server.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">nda_downloader</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">downloader</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">await</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://nda.nih.gov/ftpDownload?id=yMg9WJ2NE8coDGYEtzwqLPc&amp;ownerId=k5ME5PUkEzKRDih8nuXmAio&amp;ownerName=study&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">abcd_meds</span><span class=\"o\">.</span><span class=\"n\">nda_downloader</span><span class=\"o\">.</span><span class=\"n\">NdaDownloader</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.nda_downloader.download", "modulename": "abcd_meds.nda_downloader", "qualname": "download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://nda.nih.gov/ftpDownload?id=yMg9WJ2NE8coDGYEtzwqLPc&amp;ownerId=k5ME5PUkEzKRDih8nuXmAio&amp;ownerName=study&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;abcd-data-release-5.1.zip&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">extract_to</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;core/physical-health/ph_p_meds.csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">no_extract</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.rxnorm", "modulename": "abcd_meds.rxnorm", "kind": "module", "doc": "<p>Module for interfacing with the RxNorm API.</p>\n\n<p>For full API documentation see:\n<a href=\"https://lhncbc.nlm.nih.gov/RxNav/APIs/RxNormAPIs.html\">https://lhncbc.nlm.nih.gov/RxNav/APIs/RxNormAPIs.html</a></p>\n\n<p>For human-friendly exploration of the RxNorm database, see\n<a href=\"https://mor.nlm.nih.gov/RxNav/\">RxNav</a>.</p>\n\n<h6 id=\"the-rxnorm-module-contains-three-principal-methods\">The rxnorm module contains three principal methods:</h6>\n\n<blockquote>\n  <ul>\n  <li><code>rxcui_from_name()</code> retrieves the rxcui identifier for a drug name</li>\n  <li><code>ingredients()</code> lists rxcuis of a drug's active ingredients</li>\n  <li><code>related_rxcuis()</code> lists rxcuis of all drugs containing an ingredient</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rawait</span> <span class=\"n\">rxcui_from_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;Concerta&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">284704</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">await</span> <span class=\"n\">ingredients</span><span class=\"p\">(</span><span class=\"mi\">284704</span><span class=\"p\">)</span>\n<span class=\"go\">[6901]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">related_rxcuis</span><span class=\"p\">(</span><span class=\"mi\">6901</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">284704</span> <span class=\"ow\">in</span> <span class=\"n\">rxcuis</span>\n<span class=\"go\">True</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<p>The module may also be called from the command line.</p>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code>$<span class=\"w\"> </span>python<span class=\"w\"> </span>rxnorm.py<span class=\"w\"> </span>rxcui_from_name<span class=\"w\"> </span>Concerta\n<span class=\"m\">284704</span>\n</code></pre>\n  </div>\n</blockquote>\n"}, {"fullname": "abcd_meds.rxnorm.RxnormError", "modulename": "abcd_meds.rxnorm", "qualname": "RxnormError", "kind": "class", "doc": "<p>Raised for problems querying the RxNorm API.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "abcd_meds.rxnorm.RxnormError.__init__", "modulename": "abcd_meds.rxnorm", "qualname": "RxnormError.__init__", "kind": "function", "doc": "<p>Construct a new instance of <code>RxnormError</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url:</strong>  URL for which error occurred</li>\n<li><strong>message:</strong>  What happened</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "abcd_meds.rxnorm.RxnormError.url", "modulename": "abcd_meds.rxnorm", "qualname": "RxnormError.url", "kind": "variable", "doc": "<p>URL for which error occurred.</p>\n"}, {"fullname": "abcd_meds.rxnorm.rxcui_from_name", "modulename": "abcd_meds.rxnorm", "qualname": "rxcui_from_name", "kind": "function", "doc": "<p>Retrieve the rxcui correponding to a drug name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  The name of a drug.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The name rxcui corresponding to <code>name</code>.</p>\n</blockquote>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcui_from_name</span><span class=\"p\">(</span><span class=\"s1\">&#39;Concerta&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">284704</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.rxnorm.ingredients", "modulename": "abcd_meds.rxnorm", "qualname": "ingredients", "kind": "function", "doc": "<p>Retrieve list of active ingredients for a drug.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>drug:</strong>  A drug name or rxcui.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of rxcuis that are active ingredients of <code>drug</code>.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ingredients</span><span class=\"p\">(</span><span class=\"s1\">&#39;Concerta&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[6901]</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">drug</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "abcd_meds.rxnorm.related_rxcuis", "modulename": "abcd_meds.rxnorm", "qualname": "related_rxcuis", "kind": "function", "doc": "<p>Retrieve a list of rxcuis containing an ingredient.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ingredient:</strong>  The name or rxcui of an active ingredient,</li>\n<li>see <code>ingredients()</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of rxcuis related to (containing) the ingredient.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rxcuis</span> <span class=\"o\">=</span> <span class=\"n\">related_rxcuis</span><span class=\"p\">(</span><span class=\"mi\">6901</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">284705</span> <span class=\"ow\">in</span> <span class=\"n\">rxcuis</span>\n<span class=\"go\">True</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ingredient</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();